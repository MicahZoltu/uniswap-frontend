name: Release
on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Build and test PRs.
  pull_request:

jobs:
  wait-on-tests:
    runs-on: ubuntu-latest
    steps:
      - id: unit-tests
        uses: fountainhead/action-wait-for-check@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: unit-tests
      - id: cypress-tests
        uses: fountainhead/action-wait-for-check@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: cypress-tests
      - if: steps.unit-tests.outputs.conclusion != 'success' || steps.cypress-tests.outputs.conclusion != 'success'
        run: exit 1

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: wait-on-tests

    runs-on: ubuntu-latest

    outputs:
      image_id: ${{ steps.push.outputs.image_id }}
      version: ${{ steps.push.outputs.version }}
      ipfs_hash: ${{ steps.push.outputs.ipfs_hash }}

    steps:
      - uses: actions/checkout@v2

      - name: Set IMAGE_TAG
        run: echo "IMAGE_TAG=$(echo ${{ github.repository }} | tr '[A-Z]' '[a-z]')" >> $GITHUB_ENV

      - name: Build image
        run: docker image build . --file Dockerfile --tag $IMAGE_TAG

      - name: Log into registry
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        run: echo "${{ secrets.ContainerRegistry }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        id: push
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        run: |
          IMAGE_ID=ghcr.io/$IMAGE_TAG

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention for main
          [ "$VERSION" == "main" ] && VERSION=latest

          docker image tag $IMAGE_TAG $IMAGE_ID:$VERSION
          docker image push $IMAGE_ID:$VERSION

          echo $IMAGE_ID:$VERSION
          docker container run --rm --entrypoint cat $IMAGE_TAG ipfs_hash.txt

          echo "::set-output name=image_id::$IMAGE_ID"
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=ipfs_hash::`docker container run --rm --entrypoint cat $IMAGE_TAG ipfs_hash.txt`"
      
  release:
    needs: push
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Release
        uses: actions/create-release@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.push.outputs.version }}
          release_name: Release ${{ needs.push.outputs.version }}
          body: |
            IPFS hash of the deployment:
            - CIDv1: `${{ needs.push.outputs.ipfs_hash }}`

            You can also access the Uniswap Interface directly from an IPFS gateway.
            **BEWARE**: The Uniswap interface uses [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) to remember your settings, such as which tokens you have imported.
            **You should always use an IPFS gateway that enforces origin separation**, or our alias to the latest release at [app.uniswap.eth](ipfs://app.uniswap.eth).
            Your Uniswap settings are never remembered across different URLs.

            IPFS gateways:
            - [ipfs://${{ needs.push.outputs.ipfs_hash }}/](ipfs://${{ needs.push.outputs.ipfs_hash }}/)
            - http://${{ needs.push.outputs.ipfs_hash }}.ipfs.localhost:8080/
            - https://${{ needs.push.outputs.ipfs_hash }}.ipfs.dweb.link/
            - https://${{ needs.push.outputs.ipfs_hash }}.ipfs.cf-ipfs.com/
